package com.example.MERCHANT.controller;import com.example.MERCHANT.dto.*;import com.example.MERCHANT.entity.MerchantDetails;import com.example.MERCHANT.entity.MerchantProduct;import com.example.MERCHANT.repository.MerchantDetailsRepository;import com.example.MERCHANT.service.MerchantService;import org.springframework.beans.BeanUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Random;import java.util.stream.Collectors;@RestController@CrossOrigin(origins = "*", allowedHeaders = "*")public class MerchantController {    @Autowired    MerchantService merchantService;    @Autowired    ProductProxy productProxy;    @Autowired    MerchantDetailsRepository merchantDetailsRepository;    @GetMapping("/addProduct")    public List<CategoryDTO> getAllCategories() {        return merchantService.getAllCategories();    }    @GetMapping("/product/{id}")    public List<String> viewProductsByCategoryId(@PathVariable("id") String id) {        return merchantService.viewProductsByCategoryId(id);    }    @GetMapping("/merchant/{productId}")    public List<MerchantListingDTO> viewMerchantByProductId(@PathVariable("productId") String productId) {        List<MerchantProduct> merchantProductList = merchantService.findByProductId(productId);        List<MerchantListingDTO> merchantListingDTOList = merchantProductList.stream()                .map(merchantProduct -> createMerchantListingDTO(merchantProduct)).collect(Collectors.toList());        return merchantListingDTOList;    }    private MerchantListingDTO createMerchantListingDTO(MerchantProduct merchantProduct) {        return MerchantListingDTO.builder()                .merchantName(merchantProduct.getMerchantDetails().getMerchantName())                .productId(merchantProduct.getProductId())                .price((int) merchantProduct.getPrice())                .stock(merchantProduct.getStock())                .rating(merchantProduct.getMerchantDetails().getMerchantRating())                .merchantId(merchantProduct.getMerchantDetails().getMerchantId())                .build();    }    @PostMapping("/addMerchantProduct")    public ResponseEntity<String> addMerchantProduct(@RequestBody MerchantProductDTO merchantProductDTO) {        MerchantProduct merchantProduct = new MerchantProduct();        MerchantDetails merchantDetails = new MerchantDetails();        merchantDetails.setMerchantId(merchantProductDTO.getMerchantId());        BeanUtils.copyProperties(merchantProductDTO, merchantProduct);        merchantProduct.setMerchantDetails(merchantDetails);        MerchantProduct merchantProductCreated = merchantService.saveProduct(merchantProduct);        return new ResponseEntity<String>(merchantProductCreated.getProductId(), HttpStatus.CREATED);    }    @PostMapping("/addMerchantDetails")    public ResponseEntity<String> addMerchantDetails(@RequestBody MerchantDetailsDTO merchantDetailsDTO) {        MerchantDetails merchantDetails = new MerchantDetails();        Random r = new Random();        Double randomNum =  (r.nextInt((50 - 0) + 1) + 0.0)/10;        merchantDetailsDTO.setMerchantRating(randomNum);        BeanUtils.copyProperties(merchantDetailsDTO, merchantDetails);        MerchantDetails merchantDetailsCreated = merchantService.saveDetails(merchantDetails);        return new ResponseEntity<String>(merchantDetailsCreated.getMerchantId(), HttpStatus.CREATED);    }    @PostMapping("/editProduct")    public void editProduct(@RequestBody MerchantProductDTO merchantProductDTO) {        merchantService.editProduct(merchantProductDTO);    }    @GetMapping("viewProductIdByMerchantId/{merchantId}")    public List<String> viewProduct(@PathVariable("merchantId") String merchantId) {        return merchantService.findByMerchantId(merchantId);    }    @GetMapping("viewProductsByMerchantId/{merchantId}")    public List<ProductsDTO> viewProductsByMerchantId(@PathVariable("merchantId") String merchantId) {        return productProxy.getProductWithStock(merchantId);    }    @GetMapping("viewProductByProductIdAndMerchantId/{productId}/{merchantId}")    public List<MerchantProduct> viewProductByProductIdAndMerchantId(@PathVariable("productId") String productId, @PathVariable("merchantId") String merchantId) {        return merchantService.findByProductId(productId);    }    @PostMapping("/productMerchant")    public Map<String, MerchantProduct> viewPriceAndStockByProductId(@RequestBody List<ProductsInCartDTO> productsInCartDTO) {        Map<String, MerchantProduct> merchantProductMap = new HashMap<>();        productsInCartDTO.forEach(productsInCartDTO1 -> {            MerchantProduct merchantProducts = merchantService.findByProductIdAndMerchant(productsInCartDTO1.getProductId(), productsInCartDTO1.getMerchantId());            if (null != merchantProducts) {                merchantProductMap.put(merchantProducts.getProductId() + "_" + merchantProducts.getMerchantDetails().getMerchantId(), merchantProducts);            }        });        return merchantProductMap;    }    @GetMapping("/addProductByMerchant")    public String addProduct(@RequestBody MerchantProductDTO merchantProductDTO){        merchantService.addProduct(merchantProductDTO);        return merchantProductDTO.getProductId();    }    @PostMapping("/editInventory")    public void editInventory(@RequestBody MerchantProductDTO merchantProductDTO) {        merchantService.editInventory(merchantProductDTO);    }    @PostMapping("/updateStockAfterOrder")    public CartResponseDTO updateInventory(@RequestBody CartDTO cartDTO) {        return merchantService.editInventoryAfterOrder(cartDTO);    }}